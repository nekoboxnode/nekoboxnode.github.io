<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nekoboxnode.github.io/news/article-38493.htm" />
    <meta charset="utf-8">
    <title>SpringCloud——安全认证（Security）</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="一、SpringCloud Security简介 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Spring Cloud Security提供了一组原语，用于构建安全的应用程序" />
    
    <!-- Favicon -->
    <link href="/assets/website/img/nekoboxnode/favicon.ico" rel="icon">

    <meta name="author" content="NekoBoxNode官网节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nekoboxnode.github.io/news/article-38493.htm" />
    <meta property="og:site_name" content="NekoBoxNode官网节点站" />
    <meta property="og:title" content="SpringCloud——安全认证（Security）" />
    <meta property="og:image" content="https://nekoboxnode.github.io/uploads/20240427/510837b685296a9b08bff94351d2c5f3.webp" />
        <meta property="og:release_date" content="2025-01-10T10:43:30" />
    <meta property="og:updated_time" content="2025-01-10T10:43:30" />
        <meta property="og:description" content="一、SpringCloud Security简介 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Spring Cloud Security提供了一组原语，用于构建安全的应用程序" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringCloud——安全认证（Security）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
        
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Ubuntu:wght@500;700&display=swap"
        rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.bootcdn.net/ajax/libs/bootstrap-icons/1.4.1/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Libraries Stylesheet -->
    <link href="/assets/website/js/frontend/nekoboxnode/lib/animate/animate.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/nekoboxnode/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">

    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/nekoboxnode/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="/assets/website/css/nekoboxnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-93Z2TV5VL1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-93Z2TV5VL1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Spinner Start -->
    <div id="spinner"
        class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-grow text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Spinner End -->


        <!-- Navbar Start -->
    <div class="container-fluid sticky-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-dark p-0">
                <a href="/" class="navbar-brand">
                                <span>Neko Box Node</span>
                                </a>
                <button type="button" class="navbar-toggler ms-auto me-0" data-bs-toggle="collapse"
                    data-bs-target="#navbarCollapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <div class="navbar-nav ms-auto">
                                                <a href="/" class="nav-item nav-link">首页</a>
                                                <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                                <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                                <a href="/client.htm" class="nav-item nav-link">客户端</a>
                                                <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                            </div>
                </div>
            </nav>
        </div>
    </div>
    <!-- Navbar End -->


    <!-- Hero Start -->
    <div class="container-fluid pt-5 bg-primary hero-header">
        <div class="container pt-5">
            <div class="row g-5 pt-5">
                <div class="col-lg-6 align-self-center text-center text-lg-start mb-lg-5">
                    <h1 class="text-white mb-4 animated slideInRight">SpringCloud——安全认证（Security）</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center justify-content-lg-start mb-0">
                            <li class="breadcrumb-item"><a class="text-white" href="/" title="首页">首页</a></li>
                            <li class="breadcrumb-item"><a class="text-white" href="/news/" title="新闻资讯">新闻资讯</a></li>
                            <li class="breadcrumb-item text-white active" aria-current="page">正文</li>
                        </ol>
                    </nav>
                </div>
                <div class="col-lg-6 align-self-end text-center text-lg-end">
                    <img class="img-fluid" href="/assets/website/img/nekoboxnode/hero-img.png" alt="" style="max-height: 300px;">
                </div>
            </div>
        </div>
    </div>
    <!-- Hero End -->


    <!-- Full Screen Search Start -->
    <div class="modal fade" id="searchModal" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content" style="background: rgba(20, 24, 62, 0.7);">
                <div class="modal-header border-0">
                    <button type="button" class="btn btn-square bg-white btn-close" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex align-items-center justify-content-center">
                    <div class="input-group" style="max-width: 600px;">
                        <input type="text" class="form-control bg-transparent border-light p-3"
                            placeholder="Type search keyword">
                        <button class="btn btn-light px-4"><i class="bi bi-search"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Full Screen Search End -->


    <!-- About Start -->
    <div class="container-fluid py-5">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <h3>一、SpringCloud Security简介</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Spring Cloud Security提供了一组原语，用于构建安全的应用程序和服务，而且操作简便。可以在外部（或集中）进行大量配置的声明性模型有助于实现大型协作的远程组件系统，通常具有中央身份管理服务。它也非常易于在Cloud Foundry等服务平台中使用。在Spring Boot和Spring Security OAuth2的基础上，可以快速创建实现常见模式的系统，如单点登录，令牌中继和令牌交换。</p> <p id="features"><strong>功能：</strong></p> <ul> <li>从Zuul代理中的前端到后端服务中继SSO令牌</li> <li>资源服务器之间的中继令牌</li> <li>使Feign客户端表现得像<code>OAuth2RestTemplate</code>（获取令牌等）的拦截器</li> <li>在Zuul代理中配置下游身份验证</li> </ul> <h3>二、单一登录实现</h3> <p>1、在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/typ1805/article/details/82621881"  rel="nofollow">&nbsp;SpringCloud——服务的注册与发现Eureka</a>的基础上做修改</p> <p>添加spring-security支持：</p> <pre class="has"><code>&lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre> <p>添加配置：</p> <pre class="has"><code>server:   port: 8082  spring:   application:     name: eureka-client  eureka:   client:     serviceUrl:       defaultZone: http://localhost:8081/eureka/ #    fetch-registry: false #    register-with-eureka: false  # 安全认证的配置 security:   basic:     enabled: true</code></pre> <p>2、启动工程，浏览器访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8082"  rel="nofollow">http://localhost:8082</a>/test</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230113/a75fa0cb5d13b63563227d7b6d4ecedb.jpg"></p> <p>输入用户名和密码认证，用户名为user，密码在程序启动时会输出到控制台上，如图：</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230113/ac76005d959b73aa1adfd5620a7450c6.jpg"></p> <p>登录成功后浏览器显示：</p> <pre class="has"><code>test=============8082</code></pre> <h3>三、配置MySQL数据库实现认证</h3> <p>1、添加相关依赖：</p> <pre class="has"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; 	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  	&lt;groupId&gt;com.example.demo.security&lt;/groupId&gt; 	&lt;artifactId&gt;security-oauth2&lt;/artifactId&gt; 	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; 	&lt;packaging&gt;jar&lt;/packaging&gt;  	&lt;name&gt;security-oauth2&lt;/name&gt;  	&lt;parent&gt; 		&lt;groupId&gt;com.example.demo&lt;/groupId&gt; 		&lt;artifactId&gt;springcloud-security&lt;/artifactId&gt; 		&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; 	&lt;/parent&gt;  	&lt;properties&gt; 		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; 		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; 		&lt;java.version&gt;1.8&lt;/java.version&gt; 	&lt;/properties&gt;  	&lt;dependencies&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; 			&lt;scope&gt;test&lt;/scope&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; 			&lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; 			&lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-velocity&lt;/artifactId&gt; 			&lt;version&gt;1.1.3.RELEASE&lt;/version&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;mysql&lt;/groupId&gt; 			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; 		&lt;/dependency&gt;  	&lt;/dependencies&gt;  	&lt;build&gt; 		&lt;plugins&gt; 			&lt;plugin&gt; 				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; 			&lt;/plugin&gt; 		&lt;/plugins&gt; 	&lt;/build&gt;   &lt;/project&gt; </code></pre> <p>2、添加配置文件：</p> <pre class="has"><code>server:   port: 8081  spring:   application:     name: security-oauth2   datasource:     url: jdbc:mysql://127.0.0.1:3306/alan_oauth?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true&amp;autoReconnect=true     username: root     password: admin     driver-class-name: com.mysql.jdbc.Driver  security:   basic:     enabled: false </code></pre> <p>3、相关config配置文件</p> <pre><code class="language-html">创建授权配置信息类OAuthSecurityConfig.java，声明TokenStore实现和ClientDetails的实现。</code></pre> <pre class="has"><code>package com.example.demo.security.config;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer; import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter; import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer; import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer; import org.springframework.security.oauth2.provider.ClientDetailsService; import org.springframework.security.oauth2.provider.client.JdbcClientDetailsService; import org.springframework.security.oauth2.provider.token.DefaultTokenServices; import org.springframework.security.oauth2.provider.token.TokenStore; import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;  import javax.sql.DataSource; import java.util.concurrent.TimeUnit;  /**  * 路径：com.example.demo.security.config  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:25  * 修改人：  * 修改备注：  * 修改时间：  */ @Configuration public class OAuthSecurityConfig extends AuthorizationServerConfigurerAdapter{      @Autowired     private AuthenticationManager authenticationManager;      @Autowired     private DataSource dataSource;      @Bean     public TokenStore tokenStore(){         return new JdbcTokenStore(dataSource);     }      @Override     public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {         endpoints.authenticationManager(authenticationManager);         endpoints.tokenStore(tokenStore());          // 配置TokenServices参数         DefaultTokenServices tokenServices = new DefaultTokenServices();         tokenServices.setTokenStore(endpoints.getTokenStore());         tokenServices.setSupportRefreshToken(false);         tokenServices.setClientDetailsService(endpoints.getClientDetailsService());         tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());         tokenServices.setAccessTokenValiditySeconds( (int) TimeUnit.DAYS.toSeconds(30)); // 30天         endpoints.tokenServices(tokenServices);      }       @Override     public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {         //oauthServer.checkTokenAccess("isAuthenticated()");         oauthServer.checkTokenAccess("permitAll()");         oauthServer.allowFormAuthenticationForClients();     }      @Bean     public ClientDetailsService clientDetails() {         return new JdbcClientDetailsService(dataSource);     }      @Override     public void configure(ClientDetailsServiceConfigurer clients) throws Exception {         clients.withClientDetails(clientDetails());         clients.inMemory()                 .withClient("client")                 .secret("secret")                 .authorizedGrantTypes("authorization_code")                 .scopes("app");     } } </code></pre> <pre><code class="language-html">安全服务配置类OAuthWebConfig.java</code></pre> <pre class="has"><code>package com.example.demo.security.config;  import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.builders.WebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;  /**  * 路径：com.example.demo.security.config  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:22  * 修改人：  * 修改备注：  * 修改时间：  */ @Configuration public class OAuthWebConfig extends WebSecurityConfigurerAdapter{      @Override     public void configure(WebSecurity web) throws Exception {         web.ignoring()                 .antMatchers("/favor.ico");     }      @Override     protected void configure(HttpSecurity http) throws Exception {         super.configure(http);     } } </code></pre> <p>自定义provider调用类SsoAuthProvider.java</p> <pre class="has"><code>package com.example.demo.security.config;  import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.GrantedAuthority; import org.springframework.stereotype.Component;  import java.util.Collections;  /**  * 路径：com.example.demo.security.config  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:33  * 修改人：  * 修改备注：  * 修改时间：  */ @Component public class SsoAuthProvider implements AuthenticationProvider{      private static final Logger log = LoggerFactory.getLogger(SsoAuthProvider.class);      @Override     public Authentication authenticate(Authentication authentication) throws AuthenticationException {         log.info("自定义provider调用");          返回一个Token对象表示登陆成功         return new UsernamePasswordAuthenticationToken(authentication.getPrincipal(), authentication.getCredentials(), Collections.&lt;GrantedAuthority&gt;emptyList());     }      @Override     public boolean supports(Class&lt;?&gt; aClass) {         return true;     } } </code></pre> <p>4、需要一个重定向的controller类</p> <pre class="has"><code>package com.example.demo.security.controller;  import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.SessionAttributes;  import java.util.Map;  /**  * 路径：com.example.demo.security.controller  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:30  * 修改人：  * 修改备注：  * 修改时间：  */ @RestController @SessionAttributes("authorizationRequest") public class ErrorController {      private static final Logger log = LoggerFactory.getLogger(ErrorController.class);      @RequestMapping("/oauth/error")     public String error(@RequestParam Map&lt;String, String&gt; parameters){         String url = parameters.get("redirect_uri");         log.info("重定向: {}", url);         return "redirect:" + url + "?error=1";     } } </code></pre> <p>5、启动类添加注解@EnableAuthorizationServer</p> <pre class="has"><code>package com.example.demo.security;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.ProviderManager; import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;  import java.util.Arrays;  @SpringBootApplication @EnableAuthorizationServer public class SecurityOauth2Application {  	public static void main(String[] args) { 		SpringApplication.run(SecurityOauth2Application.class, args); 	}  	@Autowired 	private AuthenticationProvider authenticationProvider;  	@Bean 	public AuthenticationManager authenticationManager(){ 		return new ProviderManager(Arrays.asList(authenticationProvider)); 	} } </code></pre> <p>6、创建数据库及相关表</p> <pre class="has"><code># Host: 127.0.0.1  (Version 5.7.21) # Date: 2018-09-26 15:17:51 # Generator: MySQL-Front 6.0  (Build 2.20)   # # Structure for table "clientdetails" #  DROP TABLE IF EXISTS `clientdetails`; CREATE TABLE `clientdetails` (   `appId` varchar(128) NOT NULL,   `resourceIds` varchar(256) DEFAULT NULL,   `appSecret` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `grantTypes` varchar(256) DEFAULT NULL,   `redirectUrl` varchar(256) DEFAULT NULL,   `authorities` varchar(256) DEFAULT NULL,   `access_token_validity` int(11) DEFAULT NULL,   `refresh_token_validity` int(11) DEFAULT NULL,   `additionalInformation` varchar(4096) DEFAULT NULL,   `autoApproveScopes` varchar(256) DEFAULT NULL,   PRIMARY KEY (`appId`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "clientdetails" #   # # Structure for table "oauth_access_token" #  DROP TABLE IF EXISTS `oauth_access_token`; CREATE TABLE `oauth_access_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication_id` varchar(128) NOT NULL,   `user_name` varchar(256) DEFAULT NULL,   `client_id` varchar(256) DEFAULT NULL,   `authentication` blob,   `refresh_token` varchar(256) DEFAULT NULL,   PRIMARY KEY (`authentication_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_access_token" #   # # Structure for table "oauth_approvals" #  DROP TABLE IF EXISTS `oauth_approvals`; CREATE TABLE `oauth_approvals` (   `userId` varchar(256) DEFAULT NULL,   `clientId` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `status` varchar(10) DEFAULT NULL,   `expiresAt` datetime DEFAULT NULL,   `lastModifiedAt` datetime DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_approvals" #   # # Structure for table "oauth_client_details" #  DROP TABLE IF EXISTS `oauth_client_details`; CREATE TABLE `oauth_client_details` (   `client_id` varchar(128) NOT NULL,   `resource_ids` varchar(256) DEFAULT NULL,   `client_secret` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `authorized_grant_types` varchar(256) DEFAULT NULL,   `web_server_redirect_uri` varchar(256) DEFAULT NULL,   `authorities` varchar(256) DEFAULT NULL,   `access_token_validity` int(11) DEFAULT NULL,   `refresh_token_validity` int(11) DEFAULT NULL,   `additional_information` varchar(4096) DEFAULT NULL,   `autoapprove` varchar(256) DEFAULT NULL,   PRIMARY KEY (`client_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_client_details" #  INSERT INTO `oauth_client_details` VALUES ('client',NULL,'secret','app','authorization_code','http://www.baidu.com',NULL,NULL,NULL,NULL,NULL);  # # Structure for table "oauth_client_token" #  DROP TABLE IF EXISTS `oauth_client_token`; CREATE TABLE `oauth_client_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication_id` varchar(128) NOT NULL,   `user_name` varchar(256) DEFAULT NULL,   `client_id` varchar(256) DEFAULT NULL,   PRIMARY KEY (`authentication_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_client_token" #   # # Structure for table "oauth_code" #  DROP TABLE IF EXISTS `oauth_code`; CREATE TABLE `oauth_code` (   `code` varchar(256) DEFAULT NULL,   `authentication` blob ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_code" #   # # Structure for table "oauth_refresh_token" #  DROP TABLE IF EXISTS `oauth_refresh_token`; CREATE TABLE `oauth_refresh_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication` blob ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_refresh_token" #  </code></pre> <p>在oauth_client_details表中添加一条数据</p> <pre class="has"><code>INSERT INTO `oauth_client_details` VALUES ('client',NULL,'secret','app','authorization_code','http://www.baidu.com',NULL,NULL,NULL,NULL,NULL); </code></pre> <p>启动工程，浏览器访问：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8081/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://www.baidu.com"  rel="nofollow">http://localhost:8081/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://www.baidu.com</a></p> <div>  <img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230113/574f69a646b70268401c0a1a8dd74a70.jpg"> </div> <p>&nbsp;</p> <p>点击Authorize会跳转到百度页面，因为数据库中配置的是百度页面。</p> <p>&nbsp;</p> <h3>四、OAuth的思路</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OAuth在"客户端"与"服务提供商"之间，设置了一个授权层（authorization layer）。"客户端"不能直接登录"服务提供商"，只能登录授权层，以此将用户与客户端区分开来。"客户端"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p> <p>"客户端"登录授权层以后，"服务提供商"根据令牌的权限范围和有效期，向"客户端"开放用户储存的资料。</p> <p>OAuth 2.0的运行流程：</p> <p><img decoding="async" alt="OAuth运行流程" class="has" src="http://img.555519.xyz/uploads/20230113/540a667ced1d2561126796d0f28888b7.jpg"></p> <blockquote> <p>（A）用户打开客户端以后，客户端要求用户给予授权。</p> <p>（B）用户同意给予客户端授权。</p> <p>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。</p> <p>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</p> <p>（E）客户端使用令牌，向资源服务器申请获取资源。</p> <p>（F）资源服务器确认令牌无误，同意向客户端开放资源。</p> </blockquote> <p>在上面六个步骤之中，B是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。</p> <h3>五、客户端的授权模式</h3> <p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。</p> <p>OAuth 2.0定义了四种授权方式：</p> <ul> <li>授权码模式（authorization code）</li> <li>简化模式（implicit）</li> <li>密码模式（resource owner password credentials）</li> <li>客户端模式（client credentials）</li> </ul> <p><strong>1、授权码模式</strong></p> <p>&nbsp; &nbsp; &nbsp; 授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与"服务提供商"的认证服务器进行互动。</p> <p><img decoding="async" alt="授权码模式" class="has" src="http://img.555519.xyz/uploads/20230113/3929f909577479cfc3403653f928c58f.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）用户访问客户端，后者将前者导向认证服务器。</p> <p>（B）用户选择是否给予客户端授权。</p> <p>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码。</p> <p>（D）客户端收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p> <p>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p> </blockquote> <p><strong>2、简化模式</strong></p> <p>&nbsp; &nbsp; &nbsp;简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p> <p><img decoding="async" alt="简化模式" class="has" src="http://img.555519.xyz/uploads/20230113/1073c6304d744c80f2f4c81da8a1c64e.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）客户端将用户导向认证服务器。</p> <p>（B）用户决定是否给于客户端授权。</p> <p>（C）假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，并在URI的Hash部分包含了访问令牌。</p> <p>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</p> <p>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</p> <p>（F）浏览器执行上一步获得的脚本，提取出令牌。</p> <p>（G）浏览器将令牌发给客户端。</p> </blockquote> <p><strong>3、密码模式</strong></p> <p>&nbsp; &nbsp; &nbsp;密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。</p> <p>&nbsp; &nbsp; &nbsp;在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p> <p><img decoding="async" alt="密码模式" class="has" src="http://img.555519.xyz/uploads/20230113/0f7c5337cd034740102a19dab027e38a.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）用户向客户端提供用户名和密码。</p> <p>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。</p> <p>（C）认证服务器确认无误后，向客户端提供访问令牌。</p> </blockquote> <p><strong>4、客户端模式</strong></p> <p>&nbsp; &nbsp; &nbsp;客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。</p> <p><img decoding="async" alt="客户端模式" class="has" src="http://img.555519.xyz/uploads/20230113/ca3f87ca93c0c1a8b184d459be66a7df.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。</p> <p>（B）认证服务器确认无误后，向客户端提供访问令牌。</p> </blockquote> <h3>六、更新令牌</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp;如果用户访问的时候，客户端的"访问令牌"已经过期，则需要使用"更新令牌"申请一个新的访问令牌。</p> <p>客户端发出更新令牌的HTTP请求，包含以下参数：</p> <ul> <li>grant<em>type：表示使用的授权模式，此处的值固定为"refresh</em>token"，必选项。</li> <li>refresh_token：表示早前收到的更新令牌，必选项。</li> <li>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。</li> </ul> <h3>源码</h3> <p>码云：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/typ1805/springcloud-master"  rel="nofollow">https://gitee.com/typ1805/springcloud-master</a><span style="font-size: 16px;">&nbsp;</span></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-38492.htm">以字符串的升序排列单词-JavaScript</a></p>
                                        <p>下一个：<a href="/news/article-38998.htm">动物医院名字有创意吗女生怎么取（动物医院有什么）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-4-free-ssr-node.htm" title="「2月4日」最高速度23M/S，2025年NekoBox每天更新免费节点订阅链接">「2月4日」最高速度23M/S，2025年NekoBox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-33194.htm" title="检索存储在INT列中作为MySQL TIMESTAMP的值的正确方法是什么？">检索存储在INT列中作为MySQL TIMESTAMP的值的正确方法是什么？</a></li>
                        <li class="py-2"><a href="/news/article-33655.htm" title="springboot项目部署好之后第一次启动慢的解决办法">springboot项目部署好之后第一次启动慢的解决办法</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-clash-v2ray-ss-ssr.htm" title="「12月7日」最高速度20.3M/S，2024年NekoBox每天更新免费节点订阅链接">「12月7日」最高速度20.3M/S，2024年NekoBox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-34938.htm" title="三国杀里的限定技（三国杀里的限定技是不是只能用一次）">三国杀里的限定技（三国杀里的限定技是不是只能用一次）</a></li>
                        <li class="py-2"><a href="/news/article-47398.htm" title="Kafka消费者rebalanced异常分析">Kafka消费者rebalanced异常分析</a></li>
                        <li class="py-2"><a href="/news/article-49899.htm" title="如何把宠物寄回家（如何把宠物寄回家养）">如何把宠物寄回家（如何把宠物寄回家养）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-8-free-clash-subscribe.htm" title="「1月8日」最高速度19.9M/S，2025年NekoBox每天更新免费节点订阅链接">「1月8日」最高速度19.9M/S，2025年NekoBox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-26584.htm" title="中国动物疫苗市场分析 中国动物疫苗市场分析报告">中国动物疫苗市场分析 中国动物疫苗市场分析报告</a></li>
                        <li class="py-2"><a href="/news/article-31212.htm" title="Kotlin的标准函数和静态方法">Kotlin的标准函数和静态方法</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
    <!-- About End -->



        <!-- Footer Start -->
    <div class="container-fluid bg-dark text-white-50 footer pt-5">
        <div class="container wow fadeIn" data-wow-delay="0.1s">
            <div class="copyright">
                <div class="row">
                    <div class="col-md-6 text-center text-md-start mb-3 mb-md-0">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        NekoBoxNode官网节点站 版权所有
                        <br />
                        Powered by WordPress
                    </div>
                    <div class="col-md-6 text-center text-md-end">
                        <div class="footer-menu">
                            <a href="/">Home</a>
                            <a href="#">Cookies</a>
                            <a href="#">Help</a>
                            <a href="#">FAQs</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Footer End -->


    <!-- Back to Top -->
    <a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top pt-2"><i class="bi bi-arrow-up"></i></a>


    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/wow/wow.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/waypoints/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/counterup/counterup.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/owlcarousel/owl.carousel.min.js"></script>

    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/nekoboxnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>