<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nekoboxnode.github.io/news/article-78267.htm" />
    <meta charset="utf-8">
    <title>SpringMVC的异步</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="SpringMVC的异步  最近接触了springMVC的异步模式，总结下来有两个优点： 第一，当然是节约tomcat容器的线程  第二，可以利用异步超时，起到一定的超时降级保护  注意：在Contr" />
    
    <!-- Favicon -->
    <link href="/assets/website/img/nekoboxnode/favicon.ico" rel="icon">

    <meta name="author" content="NekoBoxNode官网节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nekoboxnode.github.io/news/article-78267.htm" />
    <meta property="og:site_name" content="NekoBoxNode官网节点站" />
    <meta property="og:title" content="SpringMVC的异步" />
    <meta property="og:image" content="https://nekoboxnode.github.io/uploads/20240427/a0768b05ca1b0857abdbaf4d0ab4a0b1.webp" />
        <meta property="og:release_date" content="2025-03-21T10:29:54" />
    <meta property="og:updated_time" content="2025-03-21T10:29:54" />
        <meta property="og:description" content="SpringMVC的异步  最近接触了springMVC的异步模式，总结下来有两个优点： 第一，当然是节约tomcat容器的线程  第二，可以利用异步超时，起到一定的超时降级保护  注意：在Contr" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringMVC的异步">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
        
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Ubuntu:wght@500;700&display=swap"
        rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.bootcdn.net/ajax/libs/bootstrap-icons/1.4.1/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Libraries Stylesheet -->
    <link href="/assets/website/js/frontend/nekoboxnode/lib/animate/animate.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/nekoboxnode/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">

    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/nekoboxnode/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="/assets/website/css/nekoboxnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-93Z2TV5VL1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-93Z2TV5VL1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Spinner Start -->
    <div id="spinner"
        class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-grow text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Spinner End -->


        <!-- Navbar Start -->
    <div class="container-fluid sticky-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-dark p-0">
                <a href="/" class="navbar-brand">
                                <span>Neko Box Node</span>
                                </a>
                <button type="button" class="navbar-toggler ms-auto me-0" data-bs-toggle="collapse"
                    data-bs-target="#navbarCollapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <div class="navbar-nav ms-auto">
                                                <a href="/" class="nav-item nav-link">首页</a>
                                                <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                                <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                                <a href="/client.htm" class="nav-item nav-link">客户端</a>
                                                <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                            </div>
                </div>
            </nav>
        </div>
    </div>
    <!-- Navbar End -->


    <!-- Hero Start -->
    <div class="container-fluid pt-5 bg-primary hero-header">
        <div class="container pt-5">
            <div class="row g-5 pt-5">
                <div class="col-lg-6 align-self-center text-center text-lg-start mb-lg-5">
                    <h1 class="text-white mb-4 animated slideInRight">SpringMVC的异步</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center justify-content-lg-start mb-0">
                            <li class="breadcrumb-item"><a class="text-white" href="/" title="首页">首页</a></li>
                            <li class="breadcrumb-item"><a class="text-white" href="/news/" title="新闻资讯">新闻资讯</a></li>
                            <li class="breadcrumb-item text-white active" aria-current="page">正文</li>
                        </ol>
                    </nav>
                </div>
                <div class="col-lg-6 align-self-end text-center text-lg-end">
                    <img class="img-fluid" href="/assets/website/img/nekoboxnode/hero-img.png" alt="" style="max-height: 300px;">
                </div>
            </div>
        </div>
    </div>
    <!-- Hero End -->


    <!-- Full Screen Search Start -->
    <div class="modal fade" id="searchModal" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content" style="background: rgba(20, 24, 62, 0.7);">
                <div class="modal-header border-0">
                    <button type="button" class="btn btn-square bg-white btn-close" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex align-items-center justify-content-center">
                    <div class="input-group" style="max-width: 600px;">
                        <input type="text" class="form-control bg-transparent border-light p-3"
                            placeholder="Type search keyword">
                        <button class="btn btn-light px-4"><i class="bi bi-search"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Full Screen Search End -->


    <!-- About Start -->
    <div class="container-fluid py-5">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h3> <a id="SpringMVC_0" rel="nofollow"></a>SpringMVC的异步</h3> <blockquote> <p>最近接触了springMVC的异步模式，总结下来有两个优点：</p> <p>第一，当然是节约tomcat容器的线程 </p> <p>第二，可以利用异步超时，起到一定的超时降级保护 </p> <p>注意：在Controller中使用时，一定要注意做好接口的线程池隔离，让慢的接口使用固定数量的线程池， 否则从tomcat减少的线程会转移到应用里，导致拥塞，在部分接口下游异常的情况的情况下，会出现影响正常接口的服务. </p> </blockquote> <p>关于Spring MVC的异步</p> <blockquote> <p>同步接口在请求处理过程中一直处于阻塞状态，而异步接口可以启用后台线程去处理耗时任务。基本的使用场景：</p> <ul> <li> <p>高并发场景</p> </li> <li> <p>高耗时场景</p> </li> </ul> <p>SpringMVC提供的几种异步实现方案：</p> <ul> <li> <p>Callable 提供的带有返回值的并发操作</p> </li> <li> <p>WebAsyncTask 对Callable的封装处理</p> </li> <li> <p>@Async </p> </li> <li> <p>DeferredResult</p> </li> </ul> </blockquote> <p>Callable</p> <p>就是最简单的线程运行，然后获取返回值的模式。优点是简单，缺点是不能中途取消，只有结合FutureTask才能够提供一定的控制。但是，也不能提供异步通知的方式。</p> <pre><code>/**  * @author qiyu  * @date 2020-07-30 20:03  */ @Slf4j @RestController public class AsyncController {      @GetMapping("/test")     public String test() throws InterruptedException {         log.info("主线程开始=====&gt;"+ Thread.currentThread().getName());         Thread.sleep(30000);         log.info("主线程结束=====&gt;"+ Thread.currentThread().getName());         return "success";     }       @GetMapping("/testAsync")     public Callable&lt;String&gt; testAsync() throws InterruptedException {         log.info("主线程开始=====&gt;"+ Thread.currentThread().getName());         Callable&lt;String&gt; callable = () -&gt; {             log.info("异步线程开始=====&gt;" + Thread.currentThread().getName());             Thread.sleep(30000);             log.info("异步线程结束=====&gt;" + Thread.currentThread().getName());             return "success";         };         log.info("主线程结束=====&gt;"+ Thread.currentThread().getName());         return callable;     } } </code></pre> <p>WebAsyncTask 实例</p> <blockquote> <p><code>WebAsyncTask</code> : 在构造时写入<code>Callable</code>主要业务逻辑<br /><code>WebAsyncTask.onCompletion(Runnable)</code> ：在当前任务执行结束以后，无论是执行成功还是异常中止，onCompletion的回调最终都会被调用<br /><code>WebAsyncTask.onError(Callable&gt;)</code> ：当异步任务抛出异常的时候，<code>onError()</code>方法即会被调用<br /><code>WebAsyncTask.onTimeout(Callable&gt;)</code> ：当异步任务发生超时的时候，<code>onTimeout()</code>方法即会被调用</p> <p><code>WebAsyncTask</code>类是<code>Spring</code>提供的一步任务处理类。</p> <p><code>WebAsyncTask</code>是<code>Callable</code>的升级版</p> </blockquote> <pre><code>@RequestMapping("/async")     @ResponseBody     public WebAsyncTask&lt;String&gt; asyncTask(){         // 1000 为超时设置         WebAsyncTask&lt;String&gt; webAsyncTask = new WebAsyncTask&lt;String&gt;(1000,new Callable&lt;String&gt;(){             @Override             public String call() throws Exception {                 //业务逻辑处理                 Thread.sleep(5000);                 String message = "username:wangbinghua";                 return message;             }         });         webAsyncTask.onCompletion(new Runnable() {             @Override             public void run() {                 System.out.println("调用完成");             }         });         webAsyncTask.onTimeout(new Callable&lt;String&gt;() {             @Override             public String call() throws Exception {                 System.out.println("业务处理超时");                 return "&lt;h1&gt;Time Out&lt;/h1&gt;";             }         });          return webAsyncTask;     } </code></pre> <p>@Async实例</p> <blockquote> <p>含义</p> <blockquote> <p>1，在方法上使用该@Async注解，申明该方法是一个异步任务；</p> <p>2，在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；</p> <p>3，使用此注解的方法的类对象，必须是spring管理下的bean对象；</p> <p>4，要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解；</p> </blockquote> <p>用法</p> <blockquote> <p>在Spring中启用@Async：</p> <pre><code>    1，@Async注解在使用时，如果不指定线程池的名称，则使用Spring默认的线程池，Spring默认的线程池为**SimpleAsyncTaskExecutor**。      2，方法上一旦标记了这个@Async注解，当其它线程调用这个方法时，就会开启一个新的子线程去异步处理该业务逻辑。 </code></pre> </blockquote> <p>例子</p> <blockquote> <p>3.1，启动类中增加@EnableAsync</p> <p>以Spring boot 为例，启动类中增加@EnableAsync：</p> <pre><code>@EnableAsync@SpringBootApplicationpublic class ManageApplication {    //...} </code></pre> <p>3.2，方法上加@Async注解：</p> <pre><code>@Componentpublic class MyAsyncTask {     @Async    public void asyncCpsItemImportTask(Long platformId, String jsonList){        //...具体业务逻辑    }} </code></pre> <p>3.3，默认线程池的缺陷：</p> <pre><code>    上面的配置会启用默认的线程池/执行器，异步执行指定的方法。      Spring默认的线程池的默认配置：      默认核心线程数：8，        最大线程数：Integet.MAX_VALUE，    队列使用LinkedBlockingQueue，    容量是：Integet.MAX_VALUE，    空闲线程保留时间：60s，    线程池拒绝策略：AbortPolicy。      从最大线程数的配置上，相信你也看到问题了：**并发情况下，会无限创建线程。。。** </code></pre> <p>3.4，默认线程池–自定义配置参数：</p> <pre><code>    默认线程池的上述缺陷如何解决：      答案是，自定义配置参数就可以了。  spring:   task:     execution:       pool:         max-size: 6         core-size: 3         keep-alive: 3s         queue-capacity: 1000         thread-name-prefix: name </code></pre> </blockquote> <p>实现原理</p> <blockquote> <p>@Async的原理概括：</p> <p>@Async 的原理是通过 Spring AOP 动态代理 的方式来实现的。</p> <pre><code>    Spring容器启动初始化bean时，判断类中是否使用了@[Async](https://so.csdn.net/so/search?q=Async\&amp;spm=1001.2101.3001.7020 "Async")注解，如果使用了则为其创建切入点和切入点处理器，根据切入点创建代理，      在线程调用@Async注解标注的方法时，会调用代理，执行切入点处理器invoke方法，将方法的执行提交给线程池中的另外一个线程来处理，从而实现了异步执行。      所以，需要注意的一个错误用法是，如果a方法调用它同类中的标注@Async的b方法，是不会异步执行的，因为从a方法进入调用的都是该类对象本身，不会进入代理类。 </code></pre> <p>因此，相同类中的方法调用带@Async的方法是无法异步的，这种情况仍然是同步。</p> </blockquote> </blockquote> <p>DeferredResult实例</p> <blockquote> <p><code>DeferredResult</code>和<code>Callable</code>实现功能类型，都是异步返回，只不过<code>Callable</code>不能直接设置超时时间，还需要和<code>FutureTask</code>配合使用</p> </blockquote> <pre><code>@Controller public class DeferedResultController {       private ConcurrentLinkedDeque&lt;DeferredResult&lt;String&gt;&gt; deferredResults =             new ConcurrentLinkedDeque&lt;DeferredResult&lt;String&gt;&gt;();       @RequestMapping("/getResult")     @ResponseBody     public DeferredResult&lt;String&gt; getDeferredResultController(){          //设置 5秒就会超时         final DeferredResult&lt;String&gt; stringDeferredResult = new DeferredResult&lt;String&gt;(1000);                  //将请求加入到队列中         deferredResults.add(stringDeferredResult);          final String message = "{username:wangbinghua}";          ExecutorService executorService = Executors.newFixedThreadPool(10);         executorService.submit(new Runnable() {             @Override             public void run() {                            try {                     Thread.sleep(1010);                 } catch (InterruptedException e) {                     e.printStackTrace();                 }                  //业务处理                 System.out.println("业务处理");                 stringDeferredResult.setResult(message);             }         });           //setResult完毕之后，调用该方法         stringDeferredResult.onCompletion(new Runnable() {             @Override             public void run() {                 System.out.println("异步调用完成");                 //响应完毕之后，将请求从队列中去除掉                 deferredResults.remove(stringDeferredResult);             }         });          stringDeferredResult.onTimeout(new Runnable() {             @Override             public void run() {                 System.out.println("业务处理超时");                 stringDeferredResult.setResult("error:timeOut");             }         });         return stringDeferredResult;     }      //开启线程定时扫描队列，响应客户端     @Scheduled(fixedRate = 1000)     public void scheduleResult(){         System.out.println(new Date());         for(int i = 0;i &lt; deferredResults.size();i++){             DeferredResult&lt;String&gt; deferredResult = deferredResults.getFirst();             deferredResult.setResult("result:" + i);         }     } } </code></pre> <p>说明</p> <blockquote> <p>在Spring Mvc的控制层（springmvc层框架中）中，只要有一个用户请求便会实例化一个DeferedResult对象，然后返回该对象，然后就会释放TOMCAT的线程，从而完成客户端响应。只要DeferedResult对象不设置result响应的内容，则控制层（springMVC层）的容器主线程在响应客户端上就会发生阻塞。</p> <p>因为SpringMVC只会实例化一个Controller对象，无论有多少个用户请求，在堆上只有一个Controller对象，因此可以添加一个成员变量List，将这些用户请求的DeferedResult对象存放到List中，然后启动一个定时线程扫描list，从而依次执行setResult方法，响应客户端。</p> </blockquote></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-77582.htm">为什么猫打针没反应（为什么猫打针没反应了）</a></p>
                                        <p>下一个：<a href="/news/article-78268.htm">取消动物防疫收费合理吗知乎（动物防疫免税吗）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-56332.htm" title="从查询重写角度理解elasticsearch的高亮原理">从查询重写角度理解elasticsearch的高亮原理</a></li>
                        <li class="py-2"><a href="/news/article-59149.htm" title="动物疫苗工艺要求（动物疫苗制作流程）">动物疫苗工艺要求（动物疫苗制作流程）</a></li>
                        <li class="py-2"><a href="/news/article-67658.htm" title="动物美容师资格证怎么考试（宠物美容师证考试内容）">动物美容师资格证怎么考试（宠物美容师证考试内容）</a></li>
                        <li class="py-2"><a href="/news/article-40955.htm" title="宠物粮食加工厂加盟条件及费用表图片（宠物粮食加工厂加盟条件及费用表图片）">宠物粮食加工厂加盟条件及费用表图片（宠物粮食加工厂加盟条件及费用表图片）</a></li>
                        <li class="py-2"><a href="/news/article-54672.htm" title="深圳宠物领养中心免费领养猫咪（深圳市猫咪领养）">深圳宠物领养中心免费领养猫咪（深圳市猫咪领养）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-8-free-clash.htm" title="「2月8日」最高速度19.2M/S，2025年NekoBox每天更新免费节点订阅链接">「2月8日」最高速度19.2M/S，2025年NekoBox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-31-free-ssr-node.htm" title="「1月31日」最高速度20.3M/S，2025年NekoBox每天更新免费节点订阅链接">「1月31日」最高速度20.3M/S，2025年NekoBox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-16-free-ssr-node.htm" title="「1月16日」最高速度19.5M/S，2025年NekoBox每天更新免费节点订阅链接">「1月16日」最高速度19.5M/S，2025年NekoBox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-13-clash-windows.htm" title="「1月13日」最高速度18.3M/S，2025年NekoBox每天更新免费节点订阅链接">「1月13日」最高速度18.3M/S，2025年NekoBox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-70880.htm" title="Python  turtle  模块可以编写游戏，是真的吗？">Python  turtle  模块可以编写游戏，是真的吗？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">65</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
    <!-- About End -->



        <!-- Footer Start -->
    <div class="container-fluid bg-dark text-white-50 footer pt-5">
        <div class="container wow fadeIn" data-wow-delay="0.1s">
            <div class="copyright">
                <div class="row">
                    <div class="col-md-6 text-center text-md-start mb-3 mb-md-0">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        NekoBoxNode官网节点站 版权所有
                        <br />
                        Powered by WordPress
                    </div>
                    <div class="col-md-6 text-center text-md-end">
                        <div class="footer-menu">
                            <a href="/">Home</a>
                            <a href="#">Cookies</a>
                            <a href="#">Help</a>
                            <a href="#">FAQs</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Footer End -->


    <!-- Back to Top -->
    <a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top pt-2"><i class="bi bi-arrow-up"></i></a>


    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/wow/wow.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/waypoints/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/counterup/counterup.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxnode/lib/owlcarousel/owl.carousel.min.js"></script>

    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/nekoboxnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>